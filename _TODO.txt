Expains a few common and more exotic numbers formats.

Pre-Requisite: Memory Teir 3, Types Teir 2, 

Format.txt


@NOTE: This is kinda laready explained in Types.txt

Integers Signed + unsigned
Floating 16,32,64
Unicode <- learn how this works exactly
Posit
Base 64 Encoding




Feedback: Elijah Rust

* add table of contents per file
* Tier 1.01, 1.02 (

* How to read
** Give a 1 sentence description of each file and it contents
** What each tier cooralates to in terms of knowledge depth/expected understanding.












LinearAlgebra.txt
==============
Tier 1: Points
==============

A point is a position in space (1-n dimensions) relative to some origin or root.

Example: 1D point for points p0(-2) and p1(5)

  -4 -3 -2 -1  0  1  2  3  4  5  6  7
<--|--|--|--|--|--|--|--|--|--|--|--|-->
         |     |              |
        p0     Origin        p1


===============
Tier 1: Vectors
===============

A vector is a set of 1 or more pairs of numbers indicating of direction and magnitude through the size of the number and sign. The number of pairs of numbers determines the demensions the vector is in.

Example:

1D vector: -1, 2, -5, 6
2D vector: {-1,2}, {-5,6}, {-10,12}
3D vector: {0,1,2}, {-1,-2,-3}
4D vector: {0,-1,2,-3}






Algorithms.txt
Summary: Go over common to more exotic algorithms in incresing complexity.
Algorithm.txt

This section will breifly describe algorithms from most common/useful to least common and exotic

Prerequiste: Tier 'X' from all other sections to read 'X'.

========================
Tier 0: Computer Science
========================


#0
Computer Science talk on trade off off memory for speed and vise versa in the design.

#1

@Insert Into List
@Linear Search (Dynamic programming variant)
@Binary Search
@Unordered Remove
@Bubble Sort

#2
@Quick Sort
@Merge Sort

#3

@Sentinals (Linear Search example)
@Graph Traversal (Quick Check traversed with sentinal)
@BFS & DFS graph traversal
@Tree Traversal (inorder, preorder, postorder)

#4
@Radix Sort
@Divide and conquor spacial partitioning
@A*
@A* Goal Bounding
@Balancing Tree (AVL tree algorithm)

#5
@Dynamic Programming (Minimize/maximize something with cost)
@BOIDS
@Behavior Trees
@Jump Point Search

$6
@Z-Order: Graphics
@Hilbert Curve: Mapping 2D and 3D onto a 1D graph






